// Copyright: This file is part of korrel8r, released under https://github.com/korrel8r/korrel8r/blob/main/LICENSE
// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/korrel8r/korrel8r/pkg/korrel8r"
	"github.com/oapi-codegen/runtime"
)

// Class Names a class of objects with the same schema or structure. It has 2 parts DOMAIN:CLASS DOMAIN: name of a domain. CLASS: name of a class in the domain.
type Class = string

// Constraint Constrains the objects that will be included in search results.
type Constraint = korrel8r.Constraint

// Domain Domain configuration information.
type Domain struct {
	// Name Name of the domain.
	Name string `json:"name"`

	// Stores Stores configured for the domain.
	Stores []Store `json:"stores,omitempty"`
}

// Duration The duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are: ns, us (or Âµs), ms, s, m, h.
type Duration = time.Duration

// Edge Directed edge in the result graph, from Start to Goal classes.
type Edge struct {
	// Goal Class name of the goal node.
	Goal Class `json:"goal"`

	// Rules Set of rules followed along this edge.
	Rules []Rule `json:"rules,omitempty"`

	// Start Class name of the start node.
	Start Class `json:"start"`
}

// Error Error result containing an error message.
type Error struct {
	// Error Error message.
	Error string `json:"error"`
}

// Goals Starting point for a goals search.
type Goals struct {
	// Goals Goal classes for correlation.
	Goals []Class `json:"goals"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Graph Graph resulting from a correlation search.
type Graph struct {
	// Edges List of graph edges.
	Edges []Edge `json:"edges,omitempty"`

	// Nodes List of graph nodes.
	Nodes []Node `json:"nodes,omitempty"`
}

// GraphOptions Options controlling the form of the returned graph.
type GraphOptions struct {
	// Rules Include rule names in graph edges.
	Rules *bool `json:"rules,omitempty"`

	// Zeros Include queries that returned no results.
	Zeros *bool `json:"zeros,omitempty"`
}

// Neighbours Starting point for a neighbours search.
type Neighbours struct {
	// Depth Max depth of neighbours graph.
	Depth int `json:"depth"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Node Node in the result graph, contains results for a single class.
type Node struct {
	// Class Full class name
	Class string `json:"class"`

	// Count Number of results for this class, after de-duplication.
	Count *int `json:"count,omitempty"`

	// Queries Queries yielding results for this class.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Query Represents a request to retrieve data for a particular Class. It has 3 parts DOMAIN:CLASS:SELECTOR DOMAIN: name of a domain. CLASS: name of a class in the domain. SELECTOR: domain-specific query string to retrieve selected objects.
type Query = string

// QueryCount Query with number of results.
type QueryCount struct {
	// Count Number of results, omitted if the query was not executed.
	Count *int `json:"count,omitempty"`

	// Query Query for correlation data.
	Query Query `json:"query"`
}

// Rule Rule is a correlation rule with a list of queries and results counts found during navigation.
type Rule struct {
	// Name Name is an optional descriptive name.
	Name string `json:"name"`

	// Queries Queries generated while following this rule.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Start Start identifies a set of starting objects for correlation.
type Start struct {
	// Class Class of starting objects and queries.
	Class Class `json:"class,omitempty"`

	// Constraint Constrain the objects that will be returned.
	Constraint *Constraint `json:"constraint,omitempty"`

	// Objects Objects serialized as JSON.
	Objects []json.RawMessage `json:"objects,omitempty"`

	// Queries Queries for starting objects
	Queries []Query `json:"queries,omitempty"`
}

// Store Store is a map string keys and values used to connect to a store.
type Store map[string]string

// SetConfigParams defines parameters for SetConfig.
type SetConfigParams struct {
	// Verbose Verbose setting for logging.
	Verbose *int `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// GraphGoalsParams defines parameters for GraphGoals.
type GraphGoalsParams struct {
	Options *GraphOptions `form:"options,omitempty" json:"options,omitempty"`
}

// GraphNeighboursParams defines parameters for GraphNeighbours.
type GraphNeighboursParams struct {
	Options *GraphOptions `form:"options,omitempty" json:"options,omitempty"`
}

// QueryParams defines parameters for Query.
type QueryParams struct {
	// Query Query string.
	Query Query `form:"query" json:"query"`
}

// GraphGoalsJSONRequestBody defines body for GraphGoals for application/json ContentType.
type GraphGoalsJSONRequestBody = Goals

// GraphNeighboursJSONRequestBody defines body for GraphNeighbours for application/json ContentType.
type GraphNeighboursJSONRequestBody = Neighbours

// ListGoalsJSONRequestBody defines body for ListGoals for application/json ContentType.
type ListGoalsJSONRequestBody = Goals

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Change configuration settings at runtime.
	// (PUT /config)
	SetConfig(c *gin.Context, params SetConfigParams)
	// Get the list of correlation domains.
	// (GET /domains)
	ListDomains(c *gin.Context)
	// Create a correlation graph from start objects to goal queries.
	// (POST /graphs/goals)
	GraphGoals(c *gin.Context, params GraphGoalsParams)
	// Create a neighbourhood graph around a start object to a given depth.
	// (POST /graphs/neighbours)
	GraphNeighbours(c *gin.Context, params GraphNeighboursParams)
	// Create a list of goal nodes related to a starting point.
	// (POST /lists/goals)
	ListGoals(c *gin.Context)
	// Execute a query, returns a list of JSON objects.
	// (GET /objects)
	Query(c *gin.Context, params QueryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SetConfig operation middleware
func (siw *ServerInterfaceWrapper) SetConfig(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetConfigParams

	// ------------- Optional query parameter "verbose" -------------

	err = runtime.BindQueryParameter("form", true, false, "verbose", c.Request.URL.Query(), &params.Verbose)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter verbose: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetConfig(c, params)
}

// ListDomains operation middleware
func (siw *ServerInterfaceWrapper) ListDomains(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDomains(c)
}

// GraphGoals operation middleware
func (siw *ServerInterfaceWrapper) GraphGoals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphGoalsParams

	// ------------- Optional query parameter "options" -------------

	err = runtime.BindQueryParameter("form", true, false, "options", c.Request.URL.Query(), &params.Options)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter options: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphGoals(c, params)
}

// GraphNeighbours operation middleware
func (siw *ServerInterfaceWrapper) GraphNeighbours(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphNeighboursParams

	// ------------- Optional query parameter "options" -------------

	err = runtime.BindQueryParameter("form", true, false, "options", c.Request.URL.Query(), &params.Options)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter options: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphNeighbours(c, params)
}

// ListGoals operation middleware
func (siw *ServerInterfaceWrapper) ListGoals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGoals(c)
}

// Query operation middleware
func (siw *ServerInterfaceWrapper) Query(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryParams

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument query is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/config", wrapper.SetConfig)
	router.GET(options.BaseURL+"/domains", wrapper.ListDomains)
	router.POST(options.BaseURL+"/graphs/goals", wrapper.GraphGoals)
	router.POST(options.BaseURL+"/graphs/neighbours", wrapper.GraphNeighbours)
	router.POST(options.BaseURL+"/lists/goals", wrapper.ListGoals)
	router.GET(options.BaseURL+"/objects", wrapper.Query)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaYXPbNtL+Kzt835m2c5RkO7lrh99yti/jNnHSONcPl8vNQOSKQkMCLADKVj3+WfcH",
	"7pfd7AKkKBFy5MRtZ27yJaOAJLBYPPvsswvfJrmuG61QOZtkt4nNl1gL/nlaCcs/CrS5kY2TWiVZcilq",
	"tCAgp8egF6DnP2PuLFxLtwS3RLCiRvATgTZgnWlz1xqcwoWDpbBwAo0wzsLZq5fPLi6z0xfPrq66/4Ci",
	"r/UCBBS6FlJNgZ8PH/ilpeLVwlv/VEma4I2omwqTLHFG5JjZRtBwI5xDQ8a/+1f2/k8Z/5ukiVs39K51",
	"RqoySZObSaknNDixH2Qz0bxlUU0aLZVDk2TOtHiXJqdaWWeEVG7snv6ZZes657ilcHAtqwrmCFLlVVtg",
	"QVuwKEy+BIO2rZydkrVGN2icRHY+qmK8yEWptMEdz8sarRN1Y0EsHBpwS2kBVcFPplveOTk6/nZy9O3k",
	"5Pjt8bfZk5Ps5Lvp8ZOnxydPjv+RpMlCm1q4JEsK4XBCn4+cdZcmlaxlxAEvaBicdqIC1dZzNEOQNGjg",
	"lxbNerqZkpxboqE5rRPGPXi/c1zQY94wz9Bv+bCd0LhueV1RVa8WSfbuNvl/g4skS/5vtgmQWYiO2Vlr",
	"BJt29z7dMfW5XCG0DWgFBn9p0dLhayiEE2CdNmhBLggaa3DiA0KlVcmHJZTfQBHmniZ3d72tfudDiCZZ",
	"8kEbg9V3ZjrA412anHFAjJ3oxyHXaiHLsAhI5V3EC+5ijyIuTgB0pIPgiznVb3b8+ZV3QmcGFrDQZmcy",
	"6bDmT+87BJ4o2fhIGCPWB0fxXZrQ+UiDRZK981t9v+tv8mZ31KONvCWTOz/6fYMkZrR07ipnJxWYy7qP",
	"BJsCinzpAdwZBgsjcp5EqAIEtEo6sO1iIW+m8JOopI9gHrcgDGagbAqtha+1gf/8236TQm1TsCnUKSx3",
	"mfBk+fTP9VYodDu6hwCJQSmENkBPk/OijKDhTBrMHRaARYkdJ3s2g9KIZpnCwugarnxcaniuReUZHCN0",
	"V2pRHR6HPkWNg5DH+4RBFtG8oHSBU9qKaasoNNHR+/wUFrqq9DUWIChEA5sWJR6Mzzdt9cnwpNd0Tcs0",
	"bt3nnZ4dH9s7njSDe3Yiwy+a+pOJRci5MdqMncnDHRJyrZyQikJEKEB+VKO1wvtzJ+XdN+Hgqx3K2bHb",
	"zxIzmBAYJSZhHFnIJ8GsJBg3NiTpOFojMw0hzvPkzNQ9y/bB+S758J3NXuuC7DwIVOFMP5H0BhC6n1np",
	"pV2H+s12U0QdS/EecQcNBySQf5kPxNApex1MAWdjGsNypDLBcFTag8OSaezTHUhB8lGL+KWDLbrUxWfl",
	"sfg5vOL3I6aGBxyTRleVZHZDAmrdEYJB1xqFhd/P+Fz2EOiFF7bMoEwwrNJ3TimYO9e6QsGZ5Vc0+p7Z",
	"SC9KDBq6t0zpoWjenTTmlkuU5XKuW3No8Kv+g70ALbBxEci/FDfAj8ihg2l6d94jfR8emd6I+yKTITZW",
	"crrYk7IDX9vOxcEhVqqyQk9tY1/k8YLxb20V2JAhEdOKuW5jtdRlXz4MzeBMzPOlodIpcFK0TSXznmHH",
	"7g0gGi/yY0DXWmJVEALiax0czTTf+pQ39Eja1Ps1dqy81nhLb7AxaMkqEF0VQtLLoDMSV+irEX+kVInL",
	"vK2EAc4tfZH+JFKkZ1fnL85P375687nVOnQTZWFkYhvM5ULmvjrs9PTQaIuVV5qhDNwVuiGVZrdMPA3V",
	"/7DQOmVTMpgLk0Il5ljZDG5BZDCHuxQWdOw8kmdQwN3dvn7BZ3cNBsCIgnDtywK1C/pIoB0YLimQhiSX",
	"+ZIz+PZaWFDaAd5g3jos9gfM+nCx6aE4Fpt+ZzsiiAE4lpp+yRjQWUuPcU5phkuu4dycfNiVAqqQlrsU",
	"QhVWF9/sRQrzVhVUyBHelFjJ8uHVMNmgNgVd/8bKZ8FoffxRQipRoRF0etdLWWEoSGRXi9A2/0BS2lsw",
	"X8VbOL7+kwUqJxd8FGB9uWW71Nu1dyKKeU+ieYw6KGYBwSScz/QBEZ5v9QUPNG7Quxlb2D3c30vs9BDX",
	"teGNiOYLn1o0UlTyVyprLXx/9epyC0KiKKTf2+uBw31Bel8n6mer1fSNuH7pi7PPkNcfjYoFd5S3z+tB",
	"UfCoStv3oPZ67nYc9pFmmKewWjRd1vuAa4/BlahatNBaLCgV5lopzDmVh2bigFk6o8hOvKH8JaoznUdc",
	"+UPoG8LfLRp43sqCRFlrqiRLls41NpvN+t5iKd2ynU+l7odmtA2pFtqnIuVE7jb8mLw2mgyBbpXR1GHG",
	"XNebKbsfYw89DyzolakFu/QcOCAIC3N014iKqF23Jg9Er+cWzUrMZSXdGqwsFdXyUrEmaa1DQ+6rZI7K",
	"4mAHzxqRLxFOpkcPsn02r/R8RmJm9uLi9Pzy6tz3lh2rk97pb86v3sKz1xdJmqzQWL/L1bGomqU45iBu",
	"UIlGJlnyZHo0PfZ6ZMnnOPNdU/rZtBGSfakLuVhvlNJ2r9eio6ix8DVOyylUuoQVmrm20q2/AU1+Ma3i",
	"Jg05TuboJRbhmWe4KHyT7NRbQYYZUaNDqqje7RrzE8+N3bIcuZUuS6lKJh16x2f8tPO8N4fQ6EOWdliL",
	"G1m3dZIdH6VJLZX/z9FYshB9GrSNVtbH3snRUYQJf2DZYdu6FqRvktOlUCXucxVVnK3qrhOcKC0r8q55",
	"nbynyWZew/qWELqYICeStgNB0sMhfMqA9a24WHucu8bDm67tM3khrTsLNsSdQHGKIS81fak0I+LeXPvR",
	"r4OINFwxfDKTjqKcTiVNnj7Q1nvbPNz+iywl1Yp76gPs8tJPf/ulQ41N2ptV5w4Sn6NjCHQY2RLM/nSH",
	"IAxqmQHoyXHW9yMbbWMajGus9Y706rJoSpKgE8qUZTdaYfMG31CUfX9zChto+zbPsNNbVcDUBRWKYtD5",
	"Gy7rkxnP6Adi+OaG1vPQf9whHbxpKu5ueJkSoxUdWmHpgQe41T/j1syaOXyhTZ14muGa+q+6WD8aavz2",
	"Iqi58jfE7Dvb3aKUO7coG2kehNRnkcBHnZPsjeGTo7/89ksxmZi2cVikvoMhqlDXfeGR5NQgCabtqthH",
	"5wBEfTURwDSodzZpzn/Phd7NJNcFlqgmAf2TuS7WkxBiYSwZspHa6rf+tpTkm63dTXK/8lLrouvdjqhK",
	"LwYUxQ2D0LI1UKH1t3073LVl3V6mGjSa/2fparDHgziLjmYDiC+U9YWyopS1Hbk+ToXhFl1UN8gVKh+2",
	"j0FcpLz+YBXViT9ipo6ih3/D4Lvp3ALKhfIdICpXi5i42lcrdFLqd9Ux9mM65tE54Xe4ff1Sydwbzh2a",
	"+z+/seADs+iaWMNr18cI4UELNFqKn/tLj81lZl+Jf8Vp+KtwR0DxuFWNjQPZb30KZxr9hUqDhi/RhVpv",
	"aS//511RvfBjSP33dlJ+HFyJ7WuddP/djqBDJUTojO5roTw84g7vJH8JvUcNvQ2+GRFpgPIwtXx/9eqy",
	"17CxhgJNiGbVgdG3QGeikbNNn/L93X8DAAD//3yfnuY7LgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
