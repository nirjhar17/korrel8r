# Add this to your Streamlit app for export functionality

import streamlit as st
import json
from datetime import datetime

def export_analysis_to_doc(analysis_text, pod_name, namespace):
    """Export analysis to downloadable document"""
    
    # Create formatted document content
    doc_content = f"""
# AI OpenShift Troubleshooter Analysis Report

**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Pod:** {pod_name}
**Namespace:** {namespace}

---

## Analysis Results

{analysis_text}

---

*Generated by AI OpenShift Troubleshooter v3.2*
"""
    
    return doc_content

# In your main analysis section, add this:
def add_export_button(analysis_text, pod_name, namespace):
    """Add export button to analysis results"""
    
    if analysis_text and not analysis_text.startswith("‚ùå"):
        # Create export content
        export_content = export_analysis_to_doc(analysis_text, pod_name, namespace)
        
        # Add download button
        st.download_button(
            label="üìÑ Export Analysis to Document",
            data=export_content,
            file_name=f"troubleshooter-analysis-{pod_name}-{datetime.now().strftime('%Y%m%d-%H%M%S')}.md",
            mime="text/markdown",
            help="Download analysis as Markdown document"
        )
        
        # Also add JSON export for structured data
        json_data = {
            "timestamp": datetime.now().isoformat(),
            "pod_name": pod_name,
            "namespace": namespace,
            "analysis": analysis_text
        }
        
        st.download_button(
            label="üìä Export as JSON",
            data=json.dumps(json_data, indent=2),
            file_name=f"troubleshooter-analysis-{pod_name}-{datetime.now().strftime('%Y%m%d-%H%M%S')}.json",
            mime="application/json",
            help="Download analysis as structured JSON"
        )

# Usage in your app:
# After displaying the analysis, add:
# add_export_button(ai_analysis, selected_pod, selected_namespace)


